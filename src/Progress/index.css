/**
 * @fileoverview CSS for Progress dataflow component
 * @author Frederik Krautwald
 * @copyright 2015 Cyclic Materials. All rights reserved.
 */

@import "@cyclic/atom-layout/atom-layout.css";
@import "@cyclic/atom-color/atom-color.css";

/*------------------------------------*\
    #PROGRESS
\*------------------------------------*/


/**
 * CONTENTS
 *
 * COMPONENT
 * molecule-Progress............................Progress.
 *
 * DESCENDENTS
 * molecule-Progress_container..................Progress container.
 * molecule-Progress_primary....................Primary progress.
 * molecule-Progress_secondary..................Secondary progress.
 *
 * COMPONENT STATE MODIFIERS
 * is-Transiting................................Transiting state.
 * is-Disabled..................................Disabled state.
 * is-Indeterminate.............................Indeterminate state.
 *
 * ANIMATIONS
 * indeterminate-bar............................Indeterminate progress bar
 *                                              animation.
 * indeterminate-splitter ......................Indeterminate progress splitter
 *                                              animation.
 */

.molecule-Progress {
    display: block;
    overflow: hidden;
    position: relative;
    width: 200px;
}

    .molecule-Progress_container {
        position: relative;
    }

    .molecule-Progress_container,
    .molecule-Progress.is-Indeterminate .molecule-Progress_primary::after {
        background-color: var(--molecule-Progress-container-color, var(--atom-Color-grey-300, #e0e0e0));
        height: var(--molecule-Progress-height, 4px);
    }

    .molecule-Progress.is-Transiting .molecule-Progress_primary,
    .molecule-Progress.is-Transiting .molecule-Progress_secondary {
        transition-property: transform;
        transition-duration: var(--molecule-Progress-transition-duration, 0.08s);
        transition-timing-function: var(--molecule-Progress-transition-timing-function, ease);
        transition-delay: var(--molecule-Progress-transition-delay, 0s)
    }

    .molecule-Progress_primary,
    .molecule-Progress_secondary {
        transform-origin: left center;
        transform: scaleX(0);
        will-change: transform;
    }

    .molecule-Progress_primary {
        background-color: var(--molecule-Progress-active-color, var(--atom-Color-green-500, #4caf50));
    }

    .molecule-Progress_secondary {
        background-color: var(--molecule-Progress-secondary-color, var(--atom-Color-green-100, #c8e6c9));
    }

    .molecule-Progress.is-Disabled .molecule-Progress_primary {
        background-color: var(--molecule-Progress-disabled-active-color, var(--atom-Color-grey-500, #9e9e9e)) !important;
    }

    .molecule-Progress.is-Disabled .molecule-Progress_secondary {
        background-color: var(--molecule-Progress-disabled-secondary-color, var(--atom-Color-grey-300, #e0e0e0)) !important;
    }

    .molecule-Progress.is-Indeterminate:not(.is-Disabled) .molecule-Progress_primary {
        transform-origin: right center;
        animation: indeterminate-bar 2s linear infinite;
    }

    .molecule-Progress.is-Indeterminate:not(.is-Disabled) .molecule-Progress_primary::after {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        content: "";
        transform-origin: center center;
        animation: indeterminate-splitter 2s linear infinite;
    }

    @keyframes indeterminate-bar {
        0% {
            transform: scaleX(1) translateX(-100%);
        }
        50% {
            transform: scaleX(1) translateX(0%);
        }
        75% {
            transform: scaleX(1) translateX(0%);
            animation-timing-function: cubic-bezier(0.28, 0.62, 0.37, 0.91);
        }
        100% {
            transform: scaleX(0) translateX(0%);
        }
    }

    @keyframes indeterminate-splitter {
        0% {
            transform: scaleX(0.75) translateX(-125%);
        }
        30% {
            transform: scaleX(0.75) translateX(-125%);
            animation-timing-function: cubic-bezier(0.42, 0, 0.6, 0.8);
        }
        90% {
            transform: scaleX(0.75) translateX(125%);
        }
        100% {
            transform: scaleX(0.75) translateX(125%);
        }
    }
